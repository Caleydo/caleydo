<?xml version="1.0"?>
<project name="jME" default="compile">
  <description>
    Ant Build File for the jME API.
    $Id: build.xml 5083 2010-04-12 05:10:26Z skye.book $
  </description>
  <!-- Since we have developers who use different tab-stop settings in their
       editors and IDE's, please use spaces, not tabs, for indentation.
       (Your editor or IDE has a setting to automatically change your tab
       keystrokes into spaces). -->

  <property file="build.properties" />
  <!-- This is because build-import.xml uses ${name}: -->
  <property name="name" value="${ant.project.name}"/>

  <!--    defaults for build.properties:-->
  <import file="build-import.xml" />

  <property name="class" location="${build}" />
  <property name="jars" location="${release}" />
  <property name="webstart" location="jnlp" />

  <property name="keyStore" value="jmeKeyStore" />
  <property name="storepass" value="..." />
  <property name="keypass" value="..." />
  <property name="keystore" value="..." />
  <property name="ftpuser" value="..." />
  <property name="ftppassword" value="..." />
  <property name="ftphost" value="ftp.jmonkeyengine.com" />
    <!-- You may prefer to set javac.debug to false to reduce size. -->
  <property name="javac.debug" value="true" />
  <property name="javac.maxmem" value="256m" />
  <property name="javac.source" value="1.5" />
  <property name="javac.target" value="1.5" />
    <!-- N.b. the .source and .target setting are NOT for source and target
         directories, but for source and target JVM versions. -->
  <property name="javac.debuglevel" value="lines,source" />
    <!-- Having line numbers in debug output is useful for the 99.9%
         of non-public builds, esp. for custom-builders who have
         runtime problems.   - blaine  -->
  <!--    end of defaults -->

  <path id="classpath">
    <fileset dir="${libs}">
      <include name="**/*.jar" />
    </fileset>
    <pathelement path="${class}" />
  </path>

  <target name="init">
    <echo message="${keyStore}" />
    <mkdir dir="${src}" />
    <mkdir dir="${class}" />
    <mkdir dir="${data}" />
    <mkdir dir="${doc}" />
    <available property="_rtlp.param" value="_rtlogprops.present"
               file="logging.properties"/>
    <property name="_rtlp.param" value="_dummy"/>
    <antcall target="-gen-rtlogprops">
      <param name="${_trlp.param}" value="true"/>
    </antcall>
  </target>

  <!-- Compiles all the jME classes, including com.jmex.* -->
  <target name="compile" depends="init" description="generate jme classes">
    <copy todir="${class}">
      <fileset dir="${src}" includes="com/**" excludes="**/.*/**, **/*.java"/>
    </copy>
    <javac source="${javac.source}" target="${javac.target}"
           debuglevel="${javac.debuglevel}"
      srcdir="${src}" destdir="${class}" includes="com/**/*.java"
      classpathref="classpath" listfiles="no" fork="true"
      memoryMaximumSize="${javac.maxmem}" debug="${javac.debug}"/>
  </target>

  <target name="run-testchooser" depends="compile-test" description="Runs the TestChooser">
    <condition property="jogl.arch.suffix" value="amd64">
      <os arch="amd64"/>
    </condition>
    <property name="jogl.arch.suffix" value="i586"/>
    <pathconvert property="native.libpath" setonempty="false">
      <filelist dir="${libs}">
        <file name="jogl/native/windows_${jogl.arch.suffix}"/>
        <file name="jogl/native/macosx"/>
        <file name="jogl/native/linux_${jogl.arch.suffix}"/>
        <file name="lwjgl/native/linux"/>
        <file name="lwjgl/native/macosx"/>
        <file name="lwjgl/native/windows"/>
        <file name="swt/linux"/>
        <file name="swt/macosx-carbon"/>
        <file name="swt/macosx-cocoa"/>
        <file name="swt/windows"/>
      </filelist>
    </pathconvert>
    <java classname="jmetest.TestChooser" fork="true" classpathref="classpath">
      <jvmarg value="-Djava.library.path=${native.libpath}"/>
    </java>
  </target>

  <target name="-enforce.jar.deps">
    <dependset>
      <srcfileset dir="build" includes="com/**"/>
      <targetfileset dir="${jars}" excludes="**/.*/**" includes="*.jar"/>
    </dependset>
  </target>

  <!-- Jar files for different parts of the jME API -->

  <target name="dist-core" depends="compile, -enforce.jar.deps"
         description="generate jme jar file">
    <jar destfile="${jars}/jme.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true" includes="com/jme/**/*.class, com/jme/**/*.tga, com/jme/**/*.png, com/jme/**/*.gif, com/jme/**/*.vert, com/jme/**/*.frag,com/jmex/pool/**/*.class" />
  </target>
  <target name="dist-audio" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (audio)">
    <jar destfile="${jars}/jme-audio.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true"
         includes="com/jmex/audio/**/*.class" />
  </target>
  <target name="dist-awt" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (awt)">
    <jar destfile="${jars}/jme-awt.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true" includes="com/jmex/awt/**/*.class" />
  </target>
  <target name="dist-swt" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (swt)">
    <jar destfile="${jars}/jme-swt.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true" includes="com/jmex/swt/**/*.class" />
  </target>
  <target name="dist-editors" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (editors)">
    <jar destfile="${jars}/jme-editors.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true" includes="com/jmex/editors/**/*.class" />
  </target>
  <target name="dist-effects" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (effects)">
    <jar destfile="${jars}/jme-effects.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true"
         includes="com/jmex/effects/**/*.class, com/jmex/effects/**/data/*" />
  </target>
  <target name="dist-font" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (font)">
    <jar destfile="${jars}/jme-font.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true" includes="com/jmex/font2d/**/*.class, com/jmex/font3d/**/*.class, com/jmex/angelfont/**/*.class, com/jmex/angelfont/**/*.png, com/jmex/angelfont/**/*.fnt" />
  </target>
  <target name="dist-gamestates" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (gamestates)">
    <jar destfile="${jars}/jme-gamestates.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true" includes="com/jmex/game/**/*.class" />
  </target>
  <target name="dist-model" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (model)">
    <jar destfile="${jars}/jme-model.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true" includes="com/jmex/model/**/*.class"
         excludes="com/jmex/model/collada/**, com/jmex/model/ogrexml/**" />
  </target>
  <target name="dist-collada" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (collada)">
    <jar destfile="${jars}/jme-collada.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true"
         includes="com/jmex/model/collada/*.class">
      <zipfileset src="lib/jme-colladabinding.jar"
                  excludes="META-INF/readme.txt"/>
    </jar>
  </target>
  <target name="dist-scene" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (scene)">
    <jar destfile="${jars}/jme-scene.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true" includes="com/jmex/scene/**/*.class" />
  </target>
  <target name="dist-terrain" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (terrain)">
    <jar destfile="${jars}/jme-terrain.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true"
         includes="com/jmex/terrain/**/*.class" />
  </target>
  <target name="dist-ogrexml" depends="compile, -enforce.jar.deps"
          description="generate jme jar file (ogrexml)">
    <jar destfile="${jars}/jme-ogrexml.jar" basedir="${class}" update="no"
         duplicate="fail" compress="true"
         includes="com/jmex/model/ogrexml/**/*.class" />
  </target>

  <!-- Creates all the jME jars -->
  <target name="dist-all" depends="dist-core, dist-terrain, dist-ogrexml, dist-audio, dist-awt, dist-swt, dist-effects, dist-model, dist-collada, dist-editors, dist-font, dist-gamestates, dist-scene" description="Generate all jar files" />

  <target name="webdist-all" depends="dist-all" description="sign JARs for JNLP distribution">
    <signjar jar="${jars}/jme.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-awt.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-swt.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-audio.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-editors.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-effects.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-font.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-gamestates.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-model.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-collada.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-scene.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-terrain.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jme-ogrexml.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
  </target>

  <target name="doc" depends="compile"
          description="generate the javadoc documentation">
    <dependset>
      <srcfileset dir="${src}/com" excludes="**/.*/**"/>
      <targetfileset dir="${doc}"/>
    </dependset>
    <available property="_passname" value="_docs.uptodate"
               file="${doc}/index.html"/>
    <property name="_passname" value="dummy"/>
    <antcall target="-doc">
      <param name="${_passname}" value="true"/>
    </antcall>
  </target>

  <!-- Generates javadoc unless param is set -->
  <target name="-doc" unless="_docs.uptodate">
    <delete dir="${doc}"/>  <!-- The dependset leaves empty directories -->
    <javadoc destdir="${doc}" useExternalFile="yes" author="true" version="true" use="true" package="yes" windowtitle="jME API" bottom="Copyright 2003-2010 jMonkeyEngine" maxmemory="256m">
      <fileset dir="${src}/com" excludes="**/.*/**" includes="**/*.java" />
    </javadoc>
  </target>

  <!-- Removes all compiled files and documentation, but leaves any created jars -->
  <target name="clean" description="clean up">
    <delete dir="${class}" />
    <delete dir="${doc}" />
    <delete>
      <fileset dir="${src}" includes="**/*.class" />
      <fileset dir="${release}" includes="jme*.jar" />
      <fileset dir="${webstart}" includes="*.jar" />
    </delete>
  </target>

  <target name="rebuild" depends="clean, compile"
          description="build from clean"/>

  <!-- *** jmetest-related build targets -->

  <target name="compile-test" depends="compile" description="generate jme test classes">
    <javac source="${javac.source}" target="${javac.target}"
           debuglevel="${javac.debuglevel}"
      srcdir="${src}" destdir="${class}" includes="jmetest/**/*.java"
      classpathref="classpath" fork="true" memoryMaximumSize="${javac.maxmem}"
      debug="${javac.debug}"/>
    <!-- copy the resources into the build directory -->
    <copy todir="${class}">
      <fileset dir="${src}" includes="jmetest/**"
               excludes="**/.*/**, **/*.java"/>
    </copy>
  </target>

  <target name="dist-test" depends="dist-all, compile-test"
    description="generate jme test class and data jars + dependent distro jars">
    <!-- Jar the demo classes -->

    <pathconvert property="jarclasspathlibs" pathsep=" " dirsep="/">
      <path>
        <fileset dir="${libs}">
          <include name="*.jar" />
        </fileset>
      </path>
      <mapper type="regexp" from=".*(lib.*)" to="\1" />
    </pathconvert>
    <pathconvert property="jarclasspathrelease" pathsep=" " dirsep="/">
      <path>
        <fileset dir="${jars}">
          <include name="*.jar" />
          <exclude name="jmetest.jar" />
        </fileset>
      </path>
      <mapper type="regexp" from=".*target.(.*)" to="\1" />
    </pathconvert>
    <echo>${jarclasspathlibs} ${jarclasspathrelease}</echo>

    <dependset>
      <srcfileset dir="build"/>
      <targetfileset dir="${jars}" excludes="**/.*/**" includes="jmetest*.jar"/>
    </dependset>

    <jar destfile="${jars}/jmetest.jar" basedir="${class}"
         duplicate="fail" compress="true"
         excludes="jmetest/**/data/**, com/**" index="yes">
      <manifest>
        <attribute name="Implementation-Title" value="${ant.project.name}" />
        <attribute name="Implementation-Vendor" value="${vendor}" />
        <attribute name="Version" value="${major}.${minor}" />
        <attribute name="Class-Path" value="${jarclasspathlibs} ${jarclasspathrelease}" />
        <attribute name="Main-Class" value="${mainclass}" />
      </manifest>
    </jar>

    <!-- Jar the demo data -->
    <jar destfile="${jars}/jmetest-data-cursor.jar" basedir="${class}"
         duplicate="fail" compress="true" includes="jmetest/data/cursor/**" />
    <jar destfile="${jars}/jmetest-data-images.jar" basedir="${class}"
         duplicate="fail" compress="true" includes="jmetest/data/images/**" />
    <jar destfile="${jars}/jmetest-data-model.jar" basedir="${class}"
         duplicate="fail" compress="true" includes="jmetest/data/model/**" />
    <jar destfile="${jars}/jmetest-data-skybox1.jar" basedir="${class}"
         duplicate="fail" compress="true" includes="jmetest/data/skybox1/**" />
    <jar destfile="${jars}/jmetest-data-sound.jar" basedir="${class}"
         duplicate="fail" compress="true" includes="jmetest/data/sound/**" />
    <jar destfile="${jars}/jmetest-data-texture.jar" basedir="${class}"
         duplicate="fail" compress="true" includes="jmetest/data/texture/**" />
  </target>

  <target name="webdist-test" depends="dist-test" description="sign test jars for Webstart distribution">
    <signjar jar="${jars}/jmetest.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jmetest-data-cursor.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jmetest-data-images.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jmetest-data-model.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jmetest-data-skybox1.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jmetest-data-sound.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${jars}/jmetest-data-texture.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
  </target>

  <!-- Jar and sign all the libraries required by jME -->
  <target name="webdist-nativelibs" description="jar and sign native libraries for Webstart distribution">
    <dependset>
      <srcfileset dir="lib"/>
      <targetfileset dir="${webstart}" excludes="**/.*/**" includes="*.jar"/>
    </dependset>

    <!-- WHY ARE ALL THE NATIVE FILES update="yes"?
         We are specifying exactly what we want in them, so we should not be
         recreating them. -->

    <!--  Jar and sign the Windows libraries -->
    <jar destfile="${webstart}/lwjgl-windows.jar" duplicate="fail" update="yes"
         basedir="lib/lwjgl/native/windows" includes="lwjgl.dll" />
  	<jar destfile="${webstart}/lwjgl-windows.jar" duplicate="fail" update="yes"
         basedir="lib/lwjgl/native/windows" includes="lwjgl64.dll" />
    <jar destfile="${webstart}/openal-windows.jar" duplicate="fail" update="yes"
         basedir="lib/lwjgl/native/windows" includes="OpenAL32.dll" />
  	<jar destfile="${webstart}/openal-windows.jar" duplicate="fail"
         basedir="lib/lwjgl/native/windows" includes="OpenAL64.dll" update="yes" />
    <jar destfile="${webstart}/jinput-windows.jar" duplicate="fail"
         basedir="lib/lwjgl/native/windows" includes="jinput-dx8.dll" update="yes" />
    <jar destfile="${webstart}/jinput-windows.jar" duplicate="fail"
         basedir="lib/lwjgl/native/windows" includes="jinput-raw.dll" update="yes" />
    <signjar jar="${webstart}/lwjgl-windows.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${webstart}/openal-windows.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${webstart}/jinput-windows.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />

    <!-- Jar and sign Linux native libraries -->
    <jar destfile="${webstart}/lwjgl-linux.jar" duplicate="fail"
         basedir="lib/lwjgl/native/linux" includes="liblwjgl.so" update="yes" />
    <jar destfile="${webstart}/lwjgl-linux.jar" duplicate="fail"
         basedir="lib/lwjgl/native/linux" includes="liblwjgl64.so" update="yes" />
    <jar destfile="${webstart}/openal-linux.jar" duplicate="fail"
         basedir="lib/lwjgl/native/linux" includes="libopenal.so" update="yes" />
    <jar destfile="${webstart}/openal-linux.jar" duplicate="fail"
         basedir="lib/lwjgl/native/linux" includes="libopenal64.so" update="yes" />
    <jar destfile="${webstart}/jinput-linux.jar" duplicate="fail"
         basedir="lib/lwjgl/native/linux" includes="libjinput-linux.so" update="yes" />
    <jar destfile="${webstart}/jinput-linux.jar" duplicate="fail"
         basedir="lib/lwjgl/native/linux" includes="libjinput-linux64.so" update="yes" />
    <signjar jar="${webstart}/lwjgl-linux.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${webstart}/openal-linux.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${webstart}/jinput-linux.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />

    <!-- Jar (eventually) and sign Mac native libraries -->
    <jar destfile="${webstart}/lwjgl-mac.jar" duplicate="fail"
         basedir="lib/lwjgl/native/macosx" includes="liblwjgl.jnilib" update="yes" />
    <jar destfile="${webstart}/jinput-mac.jar" duplicate="fail"
         basedir="lib/lwjgl/native/macosx" includes="libjinput-osx.jnilib" update="yes" />
    <jar destfile="${webstart}/openal-mac.jar" duplicate="fail"
         basedir="lib/lwjgl/native/macosx" includes="openal.dylib" update="yes" />

    <signjar jar="${webstart}/lwjgl-mac.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${webstart}/openal-mac.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${webstart}/jinput-mac.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />

    <!-- Jar (eventually) and sign Solaris native libraries -->
    <jar destfile="${webstart}/lwjgl-solaris.jar" duplicate="fail"
         basedir="lib/lwjgl/native/solaris" includes="liblwjgl.so" update="yes" />
    <jar destfile="${webstart}/openal-solaris.jar" duplicate="fail"
         basedir="lib/lwjgl/native/solaris" includes="libopenal.so" update="yes" />

    <signjar jar="${webstart}/lwjgl-solaris.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="${webstart}/openal-solaris.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
  	
    <!-- Sign the lwjgl jar -->
    <signjar jar="lib/lwjgl/lwjgl.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="lib/lwjgl/lwjgl_util.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="lib/jorbis/jorbis-0.0.17.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
    <signjar jar="lib/lwjgl/jinput.jar" alias="jme" keystore="${webstart}/${keyStore}" storepass="${storepass}" />
  </target>

  <target name="nightly" depends="webdist-all, webdist-nativelibs, webdist-test">
    <echo>${libs}/*.jar</echo>
    <zip zipfile="${release}/jME.zip">
      <zipfileset dir="${libs}" prefix="lib">
        <include name="*.jar" />
        <include name="*.dll" />
        <include name="*.so" />
        <include name="*.*lib" />
      </zipfileset>
      <fileset dir="${release}">
        <include name="*.jar" />
      </fileset>
    </zip>
    <zip zipfile="${release}/src.zip">
      <zipfileset dir="${src}" prefix="src" excludes="**/.*/**"/>
    </zip>
    <!--        <mkdir dir="ftp"/>-->
    <!--        <copy todir="ftp">-->
    <ftp server="${ftphost}" userid="${ftpuser}" password="${ftppassword}" remotedir="nightly">
      <fileset dir="${webstart}">
        <include name="*.jar" />
        <include name="*.jnlp" />
      </fileset>
      <fileset dir="${libs}">
        <include name="*.jar" />
      </fileset>
      <fileset dir="${release}">
        <include name="*.jar" />
        <include name="jME.zip" />
        <include name="src.zip" />
      </fileset>
    </ftp>
    <!--        </copy>-->
  </target>
	
	<!-- puts jme3 jars, libs and javadoc in a dated zip file -->
	    <target name="deploy-hudson" depends="dist-all, doc">
	        <!-- create date in the format MM-dd-yyyy -->
	        <tstamp>
	          <format property="date" pattern="MM-dd-yyyy" locale="en,US"/>
	        </tstamp>
	        <property name="jme2zip" value="jME2_${date}.zip"/>

		   <!-- make zip file -->
	        <zip destfile="${jme2zip}">
			<fileset dir=".">
			   	<include name="target/*.jar"/>
			   	<include name="lib/**/*.*"/>
				<include name="data/doc/**/*.*"/>
			</fileset>
		   	</zip>
	    	<copy file="${jme2zip}" toDir="/var/www/nightly" overwrite="true" failonerror="true" verbose="true"/>
	    </target>
	
	<target name="sign-jars" depends="dist-all" description="sign JARs for JNLP distribution">
		<signjar jar="${jars}/jme-audio.jar"			alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-awt.jar"				alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-collada.jar"			alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-editors.jar"			alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-effects.jar"			alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-font.jar"				alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-gamestates.jar"		alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-ogrexml.jar"			alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-model.jar"			alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-scene.jar"			alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-terrain.jar"			alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-xml.jar"				alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme-swt.jar"				alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="${jars}/jme.jar"					alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/jogl/gluegen-rt.jar"			alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/jogl/jogl.jar"				alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/junit/junit-4.1.jar"			alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/jorbis/jorbis-0.0.17.jar"		alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/lwjgl/jinput.jar"				alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/lwjgl/lwjgl_util_applet.jar"	alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/lwjgl/lwjgl_util.jar"			alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/lwjgl/lwjgl.jar"				alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/swt/linux/swt.jar"				alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/swt/macosx-carbon/swt.jar"		alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/swt/macosx-cocoa/swt_fake.jar"	alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
		<signjar jar="lib/swt/windows/swt.jar"				alias="jmonkeyengine" keystore="${keystore}" storepass="${keypass}" />
	</target>

  <target name="-gen-rtlogprops" unless="_rtlogprops.present">
    <copy file="logging-template.properties" tofile="logging.properties"/>
  </target>
</project>
