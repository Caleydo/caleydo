<?xml version="1.0"?>
<project name="jME-junit" default="unittest">
  <description>
    Ant Build File for the jME API.
    For running unit tests without the involvement of Maven (the unit test
    counterpart to "build.xml").
    $Id: build-junit.xml 4543 2009-07-23 15:04:36Z blaine.dev $
  </description>
  <!-- Since we have developers who use different tab-stop settings in their
       editors and IDE's, please us spaces, not tabs, for indentation.
       (Your editor or IDE has a setting to automatically change your tab
       keystrokes into spaces).

       The targets in this class never invoke non-test code compilations
       implicitly, leaving that up to the user to do explicitly, since they
       may not want to test their uncompiled work yet.
  -->

  <import file="build.xml" />
  <property name="junit.path" value="lib/junit/junit-4.1.jar"/>
  <!-- Set junit.path to a new jar "build.properties".  4.1 is pretty old. -->

  <target name="junit-recompile" description="regenerate jme test classes"
          depends="junit-clean, junit-compile"/>

  <target name="junit-clean" description="Purge junit classes">
    <delete dir="tmp/junit-classes"/>
    <delete dir="tmp/rawtestoutput"/>
    <delete dir="tmp/test-reports"/>
  </target>

  <target name="junit-compile" depends="init"
          description="generate jme test classes">
    <mkdir dir="tmp/junit-classes"/>
    <!--
    <copy todir="tmp/test-classes">
      <fileset dir="${src}" includes="com/**" excludes="**/.*/**, **/*.java"/>
    </copy>
    -->
    <fail unless="junit.path" message="Property 'junit.path' is required"/>
    <path id="test.refid">
      <path refid="classpath"/>
      <pathelement path="${junit.path}"/>
    </path>
    <javac source="${javac.source}" target="${javac.target}"
           debuglevel="${javac.debuglevel}" classpath="build"
           srcdir="junit" destdir="tmp/junit-classes"
           classpathref="test.refid" listfiles="no" fork="true"
           memoryMaximumSize="${javac.maxmem}" debug="${javac.debug}">
      <compilerarg value="-Xlint"/>
    </javac>
  </target>

  <target name="unittest" description="Execute unit tests"
          depends="junit-compile">
    <!-- Set property 'skip.junit-compile' to re-run because you have changed
         the runtime environment or data, and don't need to recompile the
         test classes.
    -->

    <delete dir="tmp/rawtestoutput"/>
    <delete dir="tmp/test-reports"/>
    <mkdir dir="tmp/rawtestoutput"/>
    <junit printsummary="true" failureproperty="junit.failure">
      <!-- N.b. use failureproperty instead of haltonfailure, because if we use
           the former, we will get no detailed report about the failure.
           If the test fails, the fail element below will still assure that
           the Ant run will exit with error status.
      -->
      <classpath refid="test.refid"/>
      <classpath path="build:tmp/junit-classes"/>
      <!-- Ant provides several ways to set the classpath.  The critical thing
           is just that the final classpath for the junit task must include
           the junit-4.x jar file, the test classes, and all classes referred
           to directly or indirectly by your test classes.  -->

      <batchtest todir="tmp/rawtestoutput">
        <fileset dir="tmp/junit-classes"
                 excludes="**/*$*" includes="**/*Test*"/>
        <formatter type="xml"/>
      </batchtest>
    </junit>
    <junitreport todir="tmp">
      <fileset dir="tmp/rawtestoutput"/>
      <report todir="tmp/test-reports"/>
    </junitreport>
    <fail if="junit.failure" message="Unit test(s) failed.  See reports!"/>
  </target>
</project>
