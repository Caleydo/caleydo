/**
 * 
 */
package org.studierstube.net.protocol.muddleware;

/**
 * Enumeration for different types of operations.
 *  Also used to generate selections.
 *  
 * See Muddleware::common\Operation.h
 * 
 * @author Michael Kalkusch
 *
 */
public class OperationEnum {

	/* 
	 * Copy of enum in Muddleware::common\Operation.h
	 * 
	 * Note: Maybe use Java-Enum?
	 */

	
	/**
	 *  Message ID for MUDDLEWARE::getElementAsString()
	 */
	public static final int OP_GET_ELEMENT = 0;

	/**
	 *  Message ID for MUDDLEWARE::addElementAsString()
	 */
	public static final int OP_ADD_ELEMENT = 1;

	/**
	 *  Message ID for MUDDLEWARE::addElementsAsStrings()
	 */
	public static final int OP_ADD_ELEMENTS = 2;

	/**
	 * Message ID for MUDDLEWARE::updateElement()
	 */
	public static final int OP_UPDATE_ELEMENT = 4;

	/**
	 * Message ID for MUDDLEWARE::removeElements()
	 */
	public static final int OP_REMOVE_ELEMENT = 3;

	/**
	 * Message ID for MUDDLEWARE::getElementAsString()
	 */
	public static final int OP_ELEMENT_EXISTS = 5;

	/**
	 *  Message ID for MUDDLEWARE::getAttributeAsString()
	 */
	public static final int OP_GET_ATTRIBUTE = 6;

	/**
	 * Message ID for MUDDLEWARE::updateAttribute()
	 */
	public static final int OP_UPDATE_ATTRIBUTE = 7;

	/**
	 * Adds a new attribute
	 */
	public static final int OP_ADD_ATTRIBUTE = 8;

	/**
	 * Removes an attribute
	 */
	public static final int OP_REMOVE_ATTRIBUTE = 9;

	/**
	 * Message ID for requesting the connections client ID
	 */
	public static final int OP_REQUEST_CLIENTID = 10;

	/**
	 * Message ID for registering an (non-callback) update-messages on modified nodes
	 */
	public static final int OP_REGISTER_WATCHDOG = 11;

	/**
	 * Message ID for unregistering a watchdog
	 */
	public static final int OP_UNREGISTER_WATCHDOG = 12;

	/**
	 * Message ID for watchdog reply - only set from server to client
	 */
	public static final int OP_WATCHDOG = 13;
	
	/**
	 * Message ID for doing nothing (can be used for getting only update-replies)
	 */
	public static final int OP_EMPTY = 14;
	
	
	private static final String [] comboBoxMessages = {
			"Get Element",         ///0
			"Add Element",         ///1
			"Add Elements",         ///2
			"Update Element",      ///3
			"Remove Element",      ///4
			"Element Exists",      ///5
			"Get Attribute",       ///6
			"Update Attribute",    ///7
			"Add Attribute",       ///8
			"Remove Attribute",    ///9
			"request ClientId",    ///10
			"register Watchdog" ,  ///11
			"unregister Watchdog", ///12
			"Watchdog",            ///13
			"no operation"         ///14
			};
	
	private static final String [] operationNames = {
		"OP_GET_ELEMENT",
		"OP_ADD_ELEMENT",
		"OP_ADD_ELEMENTS",
		"OP_UPDATE_ELEMENT",
		"OP_REMOVE_ELEMENT",
		"OP_ELEMENT_EXISTS",
		"OP_GET_ATTRIBUTE",
		"OP_UPDATE_ATTRIBUTE",
		"OP_ADD_ATTRIBUTE",
		"OP_REMOVE_ATTRIBUTE",
		"OP_REQUEST_CLIENTID",
		"OP_REGISTER_WATCHDOG",
		"OP_UNREGISTER_WATCHDOG",
		"OP_WATCHDOG"
	};
	
	/**
	 * Total number of operations
	 */
	public final int iNumOperations;
	
	/**
	 * Defautl constructor 
	 */
	public OperationEnum() {
		
		iNumOperations = comboBoxMessages.length;
	}

	
//	/**
//	 * Get the title for this operation.
//	 * 
//	 * @return title
//	 */
//	public String getTitle(int index) {
//		return comboBoxMessages[index];
//	}
	
	/**
	 * Title for this Operation to appear in JComboBox
	 * Note: used by getAllTitleComboBox()
	 * 
	 * @return title for combo box for this enumeration
	 */
	public String getTitleComboBox(final int index) {
		return comboBoxMessages[index];
	}
//	
//	/**
//	 * Get the index of this operation.
//	 * @return index
//	 */
//	public int getIndex() {
////		return this.ordinal();
//		return iIndex;
//	}
	
	/**
	 * Get title of OperationEnum by index.
	 * 
	 * @param iIndex index to convert to type
	 * @return naem of OperationEnum, if iIndex was valid else  "__unknown_type__" is returned
	 */
	public static String getNameFromIndex( int iIndex ) {
		return operationNames[iIndex];		
	}
	
	
//	/**
//	 * Get number of operations.
//	 * 
//	 * @return number of operations
//	 */
//	public static int getNumOperations() {
//		return iNumOperations;
//	}
	
	/**
	 * List of all operations used for combo-box.
	 * 
	 * @return list of all names to be palced inside combo box
	 */
	public static String[] getAllTitlesForComboBox() {
		String names[] = new String [comboBoxMessages.length];
		
		for ( int i=0; i< comboBoxMessages.length; i++ ) {
			names[i] = comboBoxMessages[i];
		}
		return names;
	}
	
}
