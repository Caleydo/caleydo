package org.caleydo.core.data.collection.storage;

import org.caleydo.core.data.collection.INumericalStorage;
import org.caleydo.core.data.collection.INumericalCContainer;
import org.caleydo.core.data.collection.ccontainer.EDataKind;
import org.caleydo.core.manager.IGeneralManager;

import com.sun.org.apache.bcel.internal.generic.DMUL;


public class NumericalStorage 
extends AStorage 
implements INumericalStorage
{

	/**
	 * Constructor
	 * 
	 * @param iUniqueID the unique ID generated by the system
	 * @param generalManager the general manager
	 */
	public NumericalStorage(int iUniqueID, IGeneralManager generalManager)
	{
		super(iUniqueID, generalManager);
	}
	/*
	 * (non-Javadoc)
	 * @see org.caleydo.core.data.collection.INumericalSet#normalizeWithExternalExtrema(double, double)
	 */
	public void normalizeWithExternalExtrema(double dMin, double dMax)
	{
		
		INumericalCContainer rawStorage = (INumericalCContainer)hashCContainers.get(EDataKind.RAW);
		// TODO check if dMin < fMin 
		INumericalCContainer normalizedStorage = (INumericalCContainer)rawStorage.normalizeWithExternalExtrema(dMin, dMax);
			
		hashCContainers.put(EDataKind.NORMALIZED, normalizedStorage);		
	}

	@Override
	public ERawDataType getRawDataType() {

		// TODO Auto-generated method stub
		return null;
	}
	
	public double getMin()
	{
		EDataKind dataKind = EDataKind.RAW;
		if(hashCContainers.containsKey(EDataKind.LOG10))
			dataKind = EDataKind.LOG10;
		return ((INumericalCContainer)(hashCContainers.get(dataKind))).getMin();
	}
	
	public double getMax()
	{
		EDataKind dataKind = EDataKind.RAW;
		if(hashCContainers.containsKey(EDataKind.LOG10))
			dataKind = EDataKind.LOG10;
		return ((INumericalCContainer)(hashCContainers.get(dataKind))).getMax();
	}	
	
	public void log10()
	{			
		hashCContainers.put(EDataKind.LOG10, 
				((INumericalCContainer)(hashCContainers.get(EDataKind.RAW))).log10());		
	}
	
	public void reset()
	{
		hashCContainers.remove(EDataKind.LOG10);
		hashCContainers.remove(EDataKind.NORMALIZED);		
	}

}
